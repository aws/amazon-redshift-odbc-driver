# How to build: refer to BUILD.CMAKE.md
cmake_minimum_required(VERSION 3.20)
project(RSODBC LANGUAGES C CXX)
set(ODBC_VERSION NOTFOUND)
option(ODBC_VERSION "Specify version with format: MAJOR.MINOR.PATCH SVN" "")
option(ENABLE_TESTING "Enable tests" OFF)
option(ENABLE_TEST_BUILD "Always build test directories, if available." ON)

if(NOT "$ENV{ENABLE_TESTING}" STREQUAL "")
  set(ENABLE_TESTING
      "$ENV{ENABLE_TESTING}"
      CACHE INTERNAL "Copied from environment variable")
endif()
if(NOT "$ENV{ENABLE_TEST_BUILD}" STREQUAL "")
  set(ENABLE_TEST_BUILD
      "$ENV{ENABLE_TEST_BUILD}"
      CACHE INTERNAL "Copied from environment variable")
endif()

if(ENABLE_TESTING)
  enable_testing()
  set(ENABLE_TEST_BUILD ON)
endif()
message(
  STATUS
    "ENABLE_TESTING=${ENABLE_TESTING} ENABLE_TEST_BUILD=${ENABLE_TEST_BUILD}")
enable_language(CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_VERBOSE_MAKEFILE ON)

message(STATUS "CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")

include(cmake/Common.cmake)
# Include OS specific cmake files
if(APPLE AND EXISTS "${CMAKE_SOURCE_DIR}/cmake/Darwin.cmake")
  include(cmake/Darwin.cmake)
  set_default_paths()
elseif(UNIX AND EXISTS "${CMAKE_SOURCE_DIR}/cmake/Linux.cmake")
  include(cmake/Linux.cmake)
elseif(WIN32 AND EXISTS "${CMAKE_SOURCE_DIR}/cmake/Windows.cmake")
  include(cmake/Windows.cmake)
else()
  message(FATAL_ERROR "Unsupported platform: ${CMAKE_SYSTEM_NAME}")
endif()

basic_build_settings()

# ODBC Version
if(NOT ODBC_VERSION OR ODBC_VERSION STREQUAL "")
  message(STATUS "Reading ODBC_VERSION from file...")
  file(STRINGS version.txt ODBC_VERSION_TXT LIMIT_COUNT 1)
  string(REPLACE " " "." ODBC_VERSION ${ODBC_VERSION_TXT})
endif()
message(STATUS "ODBC_VERSION: ${ODBC_VERSION}")
string(REPLACE "." ";" ODBC_VERSION ${ODBC_VERSION})
list(GET ODBC_VERSION 0 ODBC_VERSION_MAJOR)
list(GET ODBC_VERSION 1 ODBC_VERSION_MINOR)
list(GET ODBC_VERSION 2 ODBC_VERSION_PATCH)
list(GET ODBC_VERSION 3 ODBC_VERSION_SVN)

# Process dependencies. Find include, lib, lib64 subfolders. Support if they are
# optionally nested in Debug/Release.
set(DEP_DIR_EXTS " ") # not empty!!
if(RS_BUILD_TYPE)
  list(APPEND DEP_DIR_EXTS "${RS_BUILD_TYPE}")
endif()

# Process RS_DEPS_DIRS. These directories each are assumed to have inlude&lib
# folders. For more information refer to BUILD.CMAKE.md
if(RS_DEPS_DIRS)
  message(STATUS "Processing RS_DEPS_DIRS=${RS_DEPS_DIRS}")
  foreach(DEP_DIR ${RS_DEPS_DIRS})
    message(STATUS "  RS_DEPS_DIRS->${DEP_DIR}")
    foreach(DEP_DIR_EXT ${DEP_DIR_EXTS})
      message(STATUS "    RS_DEPS_DIRS->${DEP_DIR}->${DEP_DIR_EXT}")
      set(SUB_DIR ${DEP_DIR})
      if(NOT ${DEP_DIR_EXT} STREQUAL " ")
        set(SUB_DIR "${SUB_DIR}/${DEP_DIR_EXT}")
      else()
      #noop
      endif()
      if(IS_DIRECTORY ${SUB_DIR}/include)
        set(INCLUDE_DIR "")
        file(TO_CMAKE_PATH "${SUB_DIR}/include" INCLUDE_DIR)
        message(STATUS "INCLUDE_DIR:${INCLUDE_DIR}")
        list(APPEND CMAKE_INCLUDE_PATH ${INCLUDE_DIR})
        if(WIN32)
          # Hack for windows to include krb5
          string(FIND "${INCLUDE_DIR}" "kfw" KFW_FOUND)
          if(NOT KFW_FOUND EQUAL -1)
            list(APPEND CMAKE_INCLUDE_PATH ${INCLUDE_DIR}/krb5)
          endif()
        endif()
      endif()
      set(LIB_DIR "")
      if(IS_DIRECTORY ${SUB_DIR}/lib)
        set(LIB_DIR ${SUB_DIR}/lib)
      endif()
      if(IS_DIRECTORY ${SUB_DIR}/lib64)
        set(LIB_DIR ${SUB_DIR}/lib64)
      endif()
      if(NOT LIB_DIR STREQUAL "")
        file(TO_CMAKE_PATH "${LIB_DIR}" LIB_DIR)
        message(STATUS "LIB_DIR:${LIB_DIR}")
        list(APPEND CMAKE_LIBRARY_PATH ${LIB_DIR})
      endif()
    endforeach()
  endforeach()
endif()

# Process RS_MULTI_DEPS_DIRS. This is assumed to be one or more parent folder(s)
# which contain subfolders of all dependencies each of which have their own
# inlude&lib. For more information refer to BUILD.CMAKE.md
if(RS_MULTI_DEPS_DIRS)
  message(STATUS "Processing RS_MULTI_DEPS_DIRS=${RS_MULTI_DEPS_DIRS}")
  foreach(child ${RS_MULTI_DEPS_DIRS})
    file(TO_CMAKE_PATH "${child}" child)
    message(STATUS "  RS_MULTI_DEPS_DIRS child->${child}")
    subdirlist(SUB_DIRS ${child})
    message(STATUS "  RS_MULTI_DEPS_DIRS SUB_DIRS->${SUB_DIRS}")
    foreach(DEP_DIR ${SUB_DIRS})
      message(STATUS "    RS_MULTI_DEPS_DIRS DEP_DIR->${DEP_DIR}")
      foreach(DEP_DIR_EXT ${DEP_DIR_EXTS})
        set(SUB_DIR ${DEP_DIR})
        if(NOT ${DEP_DIR_EXT} STREQUAL " ")
          set(SUB_DIR "${SUB_DIR}/${DEP_DIR_EXT}")
        endif()
        if(IS_DIRECTORY ${child}/${SUB_DIR}/include)
          set(INCLUDE_DIR "")
          file(TO_CMAKE_PATH "${RS_MULTI_DEPS_DIRS}/${SUB_DIR}/include"
               INCLUDE_DIR)
          message(STATUS "    RS_MULTI_DEPS_DIRS->${DEP_DIR}->${INCLUDE_DIR}")
          list(INSERT CMAKE_INCLUDE_PATH 0 ${INCLUDE_DIR})
        endif()
        set(LIB_DIR "")
        if(IS_DIRECTORY ${child}/${SUB_DIR}/lib)
          set(LIB_DIR ${child}/${SUB_DIR}/lib)
        elseif(IS_DIRECTORY ${child}/${SUB_DIR}/lib64)
          set(LIB_DIR ${child}/${SUB_DIR}/lib64)
        endif()
        if(NOT LIB_DIR STREQUAL "")
          file(TO_CMAKE_PATH "${LIB_DIR}" LIB_DIR)
          message(STATUS "    RS_MULTI_DEPS_DIRS->${DEP_DIR}->${LIB_DIR}")
          list(INSERT CMAKE_LIBRARY_PATH 0 ${LIB_DIR})
        endif()
      endforeach()
    endforeach()
  endforeach()
else()
  message(STATUS "NO RS_MULTI_DEPS_DIRS")
endif()

# Process ODBC_DIR and RS_OPENSSL_DIR. They are assigned optional variables in
# order to manage path search order in systems that usually have their own
# versions of these libraries preinstalled.
if(RS_ODBC_DIR)
  string(REPLACE ":" ";" RS_ODBC_DIR_LIST "${RS_ODBC_DIR}")
  message("RS_ODBC_DIR_LIST=${RS_ODBC_DIR_LIST}")
  foreach(child ${RS_ODBC_DIR_LIST})
    foreach(DEP_DIR_EXT ${DEP_DIR_EXTS})
      set(SUB_DIR ${child})
      if(NOT ${DEP_DIR_EXT} STREQUAL " ")
        set(SUB_DIR "${SUB_DIR}/${DEP_DIR_EXT}")
      endif()
      message(STATUS "Checking ${SUB_DIR}/include")
      if(IS_DIRECTORY ${SUB_DIR}/include)
        message(STATUS "Checking ${SUB_DIR}/include OK")
        set(INCLUDE_DIR "")
        file(TO_CMAKE_PATH "${SUB_DIR}/include" INCLUDE_DIR)
        list(APPEND CMAKE_INCLUDE_PATH ${INCLUDE_DIR})
        list(INSERT CMAKE_INCLUDE_PATH 0 ${INCLUDE_DIR})
      endif()
      if(IS_DIRECTORY ${SUB_DIR}/lib)
        set(LIB_DIR ${SUB_DIR}/lib)
      elseif(IS_DIRECTORY ${SUB_DIR}/lib64)
        set(LIB_DIR ${SUB_DIR}/lib64)
      endif()
      if(NOT LIB_DIR STREQUAL "")
        file(TO_CMAKE_PATH "${LIB_DIR}" LIB_DIR)
        list(INSERT CMAKE_LIBRARY_PATH 0 ${LIB_DIR})
      endif()
    endforeach()
  endforeach()
endif()

if(RS_OPENSSL_DIR)
  foreach(DEP_DIR_EXT ${DEP_DIR_EXTS})
    set(SUB_DIR ${RS_OPENSSL_DIR})
    if(NOT ${DEP_DIR_EXT} STREQUAL " ")
      set(SUB_DIR "${SUB_DIR}/${DEP_DIR_EXT}")
    endif()
    if(IS_DIRECTORY ${SUB_DIR}/include)
      set(INCLUDE_DIR "")
      file(TO_CMAKE_PATH "${SUB_DIR}/include" INCLUDE_DIR)
      list(APPEND CMAKE_INCLUDE_PATH ${INCLUDE_DIR})
      list(INSERT CMAKE_INCLUDE_PATH 0 ${INCLUDE_DIR})
    endif()
    if(IS_DIRECTORY ${SUB_DIR}/lib)
      set(LIB_DIR ${SUB_DIR}/lib)
    elseif(IS_DIRECTORY ${SUB_DIR}/lib64)
      set(LIB_DIR ${SUB_DIR}/lib64)
    endif()
    if(NOT LIB_DIR STREQUAL "")
      file(TO_CMAKE_PATH "${LIB_DIR}" LIB_DIR)
      list(INSERT CMAKE_LIBRARY_PATH 0 ${LIB_DIR})
    endif()
  endforeach()
  message("CMAKE_INCLUDE_PATH=${CMAKE_INCLUDE_PATH}")
  message("CMAKE_LIBRARY_PATH=${CMAKE_LIBRARY_PATH}")
endif()

list(REMOVE_DUPLICATES CMAKE_INCLUDE_PATH)
list(REMOVE_DUPLICATES CMAKE_LIBRARY_PATH)
message("CMAKE_INCLUDE_PATH=${CMAKE_INCLUDE_PATH}")
message("CMAKE_LIBRARY_PATH=${CMAKE_LIBRARY_PATH}")

# Set export command set/export used in testing
set(EXPORT_CMD "")
set_export_cmd(EXPORT_CMD)
# Handle dependencies.
#   Some patforms require supporting libraries(like iconv) beside just odbc
set(odbc_target_libraries "")
get_odbc_target_libraries(odbc_manager_lib_list)
message(STATUS "odbc_manager_lib_list = ${odbc_manager_lib_list}")
#    look for static libs: .a or .lib
set_library_suffixes()
set_library_prefixes()
set (RS_STATIC_LIBS "")

get_rsodbc_static_libs(RS_STATIC_LIBS)
message(STATUS "RS_STATIC_LIBS=${RS_STATIC_LIBS}")

# variables needed in various subfolders including pgclient and rsodbc
set(PGCLIENT_SRC_DIR ${CMAKE_SOURCE_DIR}/src/pgclient/src)
set(PGCLIENT_SRC_INCLUDE_DIR ${PGCLIENT_SRC_DIR}/include)
set(PGCLIENT_SRC_IFACE_LIBPQ_DIR ${CMAKE_SOURCE_DIR}
                                 ${PGCLIENT_SRC_DIR}/interfaces/libpq)
set(PGCLIENT_SRC_PORT_DIR ${CMAKE_SOURCE_DIR} ${PGCLIENT_SRC_DIR}/port)

include_directories(src/logging)

add_subdirectory(src/logging)
add_subdirectory(src/pgclient/src)
add_subdirectory(src/odbc/rsodbc)

if(ENABLE_TEST_BUILD)
  add_subdirectory(unittest)
endif()
if(ENABLE_TEST_BUILD AND EXISTS "${CMAKE_SOURCE_DIR}/cmake/Test.cmake")
  include(${CMAKE_SOURCE_DIR}/cmake/Test.cmake)
  add_test_subdirectories()
elseif(ENABLE_TESTING)
  message(WARNING "Some test files are not available.")
endif()

# Add postinstall scripts as a directory in order to ensure the scripts run last
add_subdirectory(cmake/postinstall) 